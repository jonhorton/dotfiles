set noswapfile
set nocompatible

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

" Utilities
"
"closes code blocks
Bundle 'tpope/vim-endwise'
"git support in vim
Bundle 'tpope/vim-fugitive'
"complete surrounding in pairs
Bundle 'tpope/vim-surround'
"rvm for vim
Bundle 'tpope/vim-rvm'
"run ruby scripts
Bundle 'skwp/vim-ruby-conque'
"commenting in vim based on syntax
Bundle 'tomtom/tcomment_vim'
"supercharge vim buffer
Bundle 'jeetsukumaran/vim-buffergator'
"highlight hex colors numbers in css
Bundle 'ap/vim-css-color'
"upload document to github gist service
Bundle 'mattn/gist-vim'
"zen coding
Bundle 'mattn/zencoding-vim'
"sidebar project view
Bundle 'scrooloose/nerdtree'
"autocomplete
Bundle 'ervandew/supertab'
"support different syntax
Bundle 'scrooloose/syntastic'
"js unminify js/html
Bundle 'maksimr/vim-jsbeautify'
"format for csscomb
Bundle 'miripiruni/CSScomb-for-Vim'
"theme
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
"left side line number git diff
Bundle 'airblade/vim-gitgutter'
"colorful bottom vim bottom
Bundle 'bling/vim-airline'
"shows bad whitespace
Bundle 'bitc/vim-bad-whitespace'

" Languages
Bundle "othree/html5.vim"
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'groenewege/vim-less'
Bundle 'tpope/vim-markdown'
Bundle 'mmalecki/vim-node.js'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-rails'
Bundle 'vim-ruby/vim-ruby'
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'farneman/Expression-Engine-Vim-syntax'
Bundle 'nono/vim-handlebars'
Bundle 'chooh/brightscript.vim'
Bundle 'StanAngeloff/php.vim'

" VIM Dependancy
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'rson/vim-conque'
Bundle 'mattn/webapi-vim'


filetype plugin indent on     " required!
 "
 " Brief help
 " :BundleList          - list configured bundles
 " :BundleInstall(!)    - install(update) bundles
 " :BundleSearch(!) foo - search(or refresh cache first) for foo
 " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
 "
 " see :h vundle for more details or wiki for FAQ
 " NOTE: comments after Bundle command are not allowed..

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set wrap                   " do wrap lines
set linebreak              " dont break on word
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=2
set expandtab              " expand tabs to spaces
set nosmarttab             " no tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..
"set colorcolumn=80
" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

map <Leader>h :CommandT<CR>
map <Leader>vi :tabe ~/.vimrc<CR>
map <Leader>bb :!bundle install<cr>
nmap <Leader>bi :source ~/.vimrc<cr>:BundleInstall<cr>
nmap <Leader>wi :EraseBadWhitespace<CR>
map <Leader>te :!bundle exec rspec %:p:h:h<CR>

" Cmd-Shift-R Rake Test
nmap <silent> <D-R> :call RunRakeConque()<CR>
" Cmd-Shift-F for RSpec
nmap <silent> <D-F> :call RunRspecCurrentFileConque()<CR>
" Cmd-Shift-L for RSpec Current Line
nmap <silent> <D-L> :call RunRspecCurrentLineConque()<CR>
" ,Cmd-R for Last conque command
nmap <silent> ,<D-R> :call RunLastConqueCommand()<CR>


" exit to normal mode with 'jj'
inoremap jj <ESC>


" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" C-TAB and C-SHIFT-TAB cycle tabs forward and backward
nmap <c-tab> :tabnext<cr>
imap <c-tab> <c-o>:tabnext<cr>
vmap <c-tab> <c-o>:tabnext<cr>
nmap <c-s-tab> :tabprevious<cr>
imap <c-s-tab> <c-o>:tabprevious<cr>
vmap <c-s-tab> <c-o>:tabprevious<cr>

" C-# switches to tab
nmap <d-1> 1gt
nmap <d-2> 2gt
nmap <d-3> 3gt
nmap <d-4> 4gt
nmap <d-5> 5gt
nmap <d-6> 6gt
nmap <d-7> 7gt
nmap <d-8> 8gt
nmap <d-9> 9gt

" Cycle between Windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Emulate Textmate Shift Left/right
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv


" Emulate Textmate Swap Lines
" Bubble single lines
nmap <leader><Up> [e
nmap <leader><Down> ]e
" Bubble multiple lines
vmap <leader><Up> [egv
vmap <leader><Down> ]egv

" nerdtree
map <C-n> :NERDTreeToggle<cr>

vmap <D-/> gcc<left>
nmap <D-/> gcc<left>
imap <D-/> <ESC>gcc<left>
" ----------------------------------------------------------------------------
" JS BEAUTIFY
" ----------------------------------------------------------------------------
  map <c-f> :call JsBeautify()<cr>
  " or
  autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
  " for html
  autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
  " for css or scss
  autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------
colorscheme Tomorrow-Night

set guifont=SourceCodePro-Regular:h14
set background=dark
set anti
set lines=999 columns=84
set linespace=4
set guioptions=egmrt

" Command + t to :CommandT
if has("gui_macvim")
  macmenu &File.New\ Tab key=<nop>
  map <D-t> :CommandT<CR>
  map <D-t> <leader>p
endif

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set nohlsearch             " don't highlight searches
set visualbell             " shut the fuck up


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>
